<<dd_remove>>
*********************************************************************													
*	TITLE: 		Problem Set 1
*	PROJECT:	Applied-Micro 									
*	PURPOSE:							
*	AUTHOR:		Mangan		
*	CREATED:	2020_0120
*	UPDATED: 	2020_
*	CALLS UPON:	${rawdatapath}acs2007.dta
*	CALLED BY:
* 	PRODUCES: 							
*	CONTENTS:
*		0. Markdown settigns
*		2. 
*********************************************************************
<</dd_remove>>

<<dd_remove>>
*******************************
*
*	1. Markdown Settings
*
*******************************
<</dd_remove>>
<<dd_version: 1>>
<<dd_include: header.txt>>

<<dd_remove>>
*******************************
*
*	2. Open Data
*
*******************************
cd "${ps1path}"
<</dd_remove>>


<p style="font-weight:800; font-size:42px; color:#4934eb">Problem Set 1</p>

Course: ECON 8848  
Author: Dan Mangan  
Collaborators: Hannah Denker and Michelle Doughty  
Date: <<dd_display: c(current_date)>>


<nav id="toc"><strong><font size="5">Table of Contents</font></strong></nav>

## 1. Load and get to know the data

First, I will load the dataset into memory and produce an overview of its contents using the **describe** command.

~~~~
<<dd_do>>
use "${rawdatapath}acs2007.dta", clear 
describe
<</dd_do>>
~~~~  

This dataset <<dd_display: %12.0fc `r(N)'  >> has observations and <<dd_display: `r(k)'  >> variables. 

The formatting of the variables appears to be okay, though I would probabaly recode a couple of them: 
<ul>
<li>I would rename "sex" to be "female" and recode it as 0=male and 1=female.</li>
<li>Missingness in incwage seems to be coded as "99999" but should be ".".</li>
</ul>

Next, I summarize the dataset to examine each variable in more detail.

~~~~
<<dd_do>>
su 
<</dd_do>>
~~~~  

As noted above, there is strange coding for missigness in the incwage variable. Genreally
to find odd coding issues for missing values, we can check min and max values.

To find the range of **age**, we can summarize only that variable. 

~~~~
<<dd_do>>
su age
<</dd_do>>
~~~~  

We see here that the age variable ranges between <<dd_display: `r(min)'  >> and <<dd_display: `r(max)'  >> years.

## 2. Getting the sample right

Next, we will eliminate observations younger than 18 and older than 55 using <code>drop</code>. We'll also drop 
observations who are not employed. Since this means we'll be dropping both unemployed observations and those 
not in the labor market, it will be easier to use <code>keep</code> and just retain observations who are employed 
(these are coded as "1" in the empstat variable). 

~~~~
<<dd_do>>
drop if age < 18 | age > 55
keep if empstat==1
<</dd_do>>
~~~~

## 3. New Variables 

### 3a. Make variable for "female".

Next, we'd like a binary dummy variable equal to 1 for females and 0 for males. We can use the <code>recode</code>
command for this. 

~~~~
<<dd_do>>
recode sex (1=0) (2=1), gen(female)
<</dd_do>>
~~~~

Adding value labels will help us remember the meaning of each value. To do this, we first define the value label.
The next line of code applies the label "female" to the variable. We also label the variable itself with a helpful 
description of what it contains. I like to start variable labels which what type of variable it is followed by a colon. 

~~~~
<<dd_do>>
lab def female 0 "male" 1 "female"
lab val female female 
lab var female "dummy: 1=female; 0=male"
<</dd_do>>
~~~~

A quick crosstab with the old **sex** variable will ensure we encoded the variable correctly. We'll use the <code>missing</code> option
after the comma to include any missing values in the crosstab. 

~~~~
<<dd_do>>
tab female sex, mi
<</dd_do>>
~~~~

As we see above, the crosstab shows that our new variable has been coded properly. 

### 3b. Make variable for "immigrant".

We'll use a slightly different approach to create a dummy variable equal to 1 for immigrants and 0 for US-born observations. First 
we generate a new variable equal to 1 for all observations. Then we will replace this variable with a value of 0 for all observations with 
vlaues of the birthplace variable less than or equal to 120. As above, we'll add value and variable labels. 

~~~~
<<dd_do>>
gen immigrant = 1 
replace immigrant = 0 if bpl < 121
lab def immigrant 0 "immigrant" 1 "US born"
lab val immigrant immigrant 
lab var immigrant "dummy: 1=immigrant; 0=US born"
<</dd_do>>
~~~~

### 3c. Make variable for years of education. 

Next, we need to recode the current education variable to the following scheme:  

- 0 = No schooling, none, or preschool 
- 2.5 = Grades 1-4
- 6.5 = Grades 5-8
- 9, 10, 11, 12 = Grades 9, 10, 11, and 12, respectively 
- 14 = 1-3 years of college
= 16 = 4+ years of college 

We'll use this scheme to make a new variable called **educyears**, but first let's look at the current
coding scheme. We can use <code>label list</code> for this. Once we're able to clearly see the old
code scheme for the old varible, **educrec**, we can recode to our new scheme. After running a crosstab
to verify that the recode went as planned, we'll label the variable as "Education in years", with "categ:" 
in front to remind us that it is a categorical variable. 

~~~~
<<dd_do>>
lab list educreclbl 
recode educrec (0/1=0) (2=2.5) (3=6.5) (4=9) (5=10) (6=11) (7=12) (8=14) (9=16) ///
	, gen(educyears)
tab educrec educyears, mi 
lab var educyears "categ: education in years"
<</dd_do>>
~~~~


### 3d. Make variables for potential experience and potential experience squared.

This new variable will be equal to the observation's age minus years of education minus 6. 

~~~~
<<dd_do>>
gen exper = age-educyears-6
lab var exper "numer: potential experience"
gen expersq = exper^2
lab var expersq "numer: squared potential experience"
<</dd_do>>
~~~~

### 3e. Make variable for natural log of wage and salary income.

Next, we create a variable by taking the natural log of **incwage**. We'll label this variable 
as "numer: natural log of incwage"

~~~~
<<dd_do>>
gen logearn = ln(incwage)
lab var logearn "numer: natural log of incwage"
<</dd_do>>
~~~~

The output tells us that 61,932 missing values were generated. This likely corresponds to values 
of zero in **incwage**, since the log of 0 is undefined. Let's just make sure this missingness is the same 
as the number of zeros in the incwage variable. 

~~~~
<<dd_do>>
count if incwage==0
<</dd_do>>
~~~~

Since the numbers are the same, this seems like a good explanation. 

### 3f. Save as new dataset. 

We'll use the <code>save</code> command now to save a new copy of our dataset under a different name.
I like to set global paths for each project in a separate .do file; the *gendatapath* global points
Stata to where I want my generated datasets saved. 



# 4. Basic Analysis

First, we will run a regression of logearn on educyears, exper, and expersq.

~~~~
<<dd_do>>
reg logearn educyears exper expersq
<</dd_do>>
~~~~

Our output shows that years of education, potential experience, and squared potential experience
are all postitively associated with logged earnings. These relationships are statistically significant 
at the $\alpha$ = .001 level. 

Since our dependent variable is log-transformed, we need to interepret 
these coefficiens somewhat differently. Here, a one-unit increase in $\ x$ is equal to 
$\ 100 * (e^{\beta}-1)$ percent change in earnings. Using this, we can interpret the coefficiens 
as follows: 

- A one-unit increase in years of education is associated with a 
<<dd_display: %12.1fc 100*(exp(_b[educyears])-1)  >> percent increase in income, holding experience constant. 
- A one-unit increase in years of potential experience is associated with a 
<<dd_display: %12.1fc 100*(exp(_b[exper])-1)  >> percent increase in income, holding years of education constant. 
- The coefficient on our squared experience term is negative, meaning that the relationship 
between experience and income weakens with as a person gains more years of experience. 

Next, we'll run the same model but adding **female** as another independent variable. 

~~~~
<<dd_do>>
reg logearn educyears exper expersq female 
<</dd_do>>
~~~~

We see here that being female is, sadly, associated with a <<dd_display: %12.1fc abs(100*(exp(_b[female])-1))  >> 
percent decrease in income, holding years of education and experience constant. This is signicant at the .001 level.


Finally, we'll swap out **female** for **immigrant** in our model. 

~~~~
<<dd_do>>
reg logearn educyears exper expersq immigrant 
<</dd_do>>
~~~~

Interestingly, being an immigrant appears to be associated with a slight increase of <<dd_display: %12.1fc 100*(exp(_b[immigrant])-1)  >> 
percent in income, holding other variables constant.


